---
import Layout from "../layouts/Layout.astro";
import "../styles/global.css";
import audioData from "../data/audio.ts";
---

<Layout title="Music">
    <div class="glass-effect flex flex-col md:flex-row gap-8 p-6 md:p-8 rounded-xl mx-auto mt-20 md:mt-32 w-[90%] md:w-fit max-w-4xl">
        {/* Now Playing Section */}
        <div class="space-y-6 min-w-[300px]">
            {/* Album Cover */}
            <img
                id="now-playing-img"
                src={audioData[0].image || "https://placehold.co/200"}
                class="rounded-xl w-48 md:w-64 mx-auto shadow-lg hover:scale-105 transition-transform"
                alt="Album Cover"
            />

            {/* Track Info */}
            <div class="text-center space-y-2">
                <h1 class="text-2xl font-extrabold text-white">
                    <span id="now-playing-name">{audioData[0].name}</span>
                    <span class="text-accent2 font-normal" id="now-playing-genre">({audioData[0].genre})</span>
                </h1>
                <h3 class="text-gray-400" id="now-playing-artist">{audioData[0].artist}</h3>
            </div>

            {/* Progress Bar */}
            <div class="space-y-3">
                <div id="progbar" class="glass-effect p-1 h-3 w-full rounded-full">
                    <div id="progbar-current" class="bg-gradient-to-r from-accent1 to-accent2 h-full w-0 rounded-full transition-all duration-500"></div>
                </div>
                <div class="flex justify-between text-sm text-gray-400">
                    <span id="current-time">0:00</span>
                    <span id="duration">0:00</span>
                </div>
            </div>

            {/* Playback Controls */}
            <div class="flex justify-center items-center gap-6">
                <button id="prev" class="text-accent2 hover:text-white ">‚èÆ</button>
                <button id="play-pause" class="w-12 h-12 rounded-full bg-gradient-to-br from-accent1 to-accent2 flex items-center justify-center hover:scale-105 transition-transform">‚ñ∂</button>
                <button id="next" class="text-accent2 hover:text-white ">‚è≠</button>
            </div>

            {/* Volume Control */}
            <div class="flex items-center gap-4">
                <span class="text-accent2">üîä</span>
                <input
                    type="range"
                    id="volume"
                    min="0"
                    max="1"
                    step="0.1"
                    value="1"
                    class="w-32 h-1.5 bg-white/10 rounded-full appearance-none cursor-pointer accent-gradient"
                />
            </div>
        </div>

        {/* Playlist Section */}
        <div class="glass-effect p-4 rounded-xl md:max-h-[500px] overflow-y-auto">
            <h3 class="text-lg font-extrabold text-accent2 mb-4">Playlist</h3>
            <div class="space-y-3">
                {
                    audioData.map((track, index) => (
                        <div
                            class={`flex items-center gap-4 p-3 rounded-lg cursor-pointer  ${index === 0 ? "bg-white/10" : "hover:bg-white/5"}`}
                            data-src={track.source}
                            data-index={index}
                            data-image={track.image || "https://placehold.co/50"}
                            data-name={track.name}
                            data-artist={track.artist || ""}
                            data-genre={track.genre}
                            onclick={`loadTrack(this,${index})`}
                        >
                            <img
                                src={track.image || "https://placehold.co/50"}
                                class="w-10 h-10 rounded"
                                alt={track.name}
                            />
                            <div class="flex-1">
                                <p class="text-white font-medium">{track.name}</p>
                                <p class="text-sm text-gray-400">{track.artist}</p>
                            </div>
                            <span class="text-sm text-accent2">{track.genre}</span>
                        </div>
                    ))
                }
            </div>
        </div>
    </div>

    {/* Hidden Audio Player */}
    <audio id="audioPlayer" class="hidden"></audio>
</Layout>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Grab all the elements we need
        const audioPlayer = document.getElementById("audioPlayer");
        const playPauseBtn = document.getElementById("play-pause");
        const prevBtn = document.getElementById("prev");
        const nextBtn = document.getElementById("next");
        const volumeControl = document.getElementById("volume");
        const progressBar = document.getElementById("progbar");
        const currentProgress = document.getElementById("progbar-current");
        const currentTimeDisplay = document.getElementById("current-time");
        const durationDisplay = document.getElementById("duration");
        const playlistItems = document.querySelectorAll("[data-index]");

        let currentTrackIndex = 0;
        let isPlaying = false;

        const formatTime = (seconds) => {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = Math.floor(seconds % 60);
            return `${minutes}:${remainingSeconds.toString().padStart(2, "0")}`;
        };

        const loadTrack = (index) => {
            const trackElement = document.querySelector(`[data-index="${index}"]`);
            if (!trackElement) {
                console.error(`Track with index ${index} not found.`);
                return;
            }

            audioPlayer.src = trackElement.dataset.src;

            document.getElementById("now-playing-img").src = trackElement.dataset.image || "https://placehold.co/200";
            document.getElementById("now-playing-name").textContent = trackElement.dataset.name;
            document.getElementById("now-playing-artist").textContent = trackElement.dataset.artist || "";
            document.getElementById("now-playing-genre").textContent = trackElement.dataset.genre;

            playlistItems.forEach(item => item.classList.remove("bg-white/10"));
            trackElement.classList.add("bg-white/10");

            audioPlayer.addEventListener("loadedmetadata", () => {
                durationDisplay.textContent = formatTime(audioPlayer.duration);
            }, { once: true });

            if (isPlaying) audioPlayer.play();
        };

        const togglePlay = () => {
            isPlaying = !isPlaying;
            isPlaying ? audioPlayer.play() : audioPlayer.pause();
            playPauseBtn.innerHTML = isPlaying ? "‚ùö‚ùö" : "‚ñ∂";
        };

        progressBar.addEventListener("click", (e) => {
            const rect = progressBar.getBoundingClientRect();
            const clickPosition = (e.clientX - rect.left) / rect.width;
            audioPlayer.currentTime = clickPosition * audioPlayer.duration;
        });

        audioPlayer.addEventListener("timeupdate", () => {
            const progress = (audioPlayer.currentTime / audioPlayer.duration) * 100;
            currentProgress.style.width = `${progress}%`;
            currentTimeDisplay.textContent = formatTime(audioPlayer.currentTime);
        });

        volumeControl.addEventListener("input", (e) => {
            audioPlayer.volume = e.target.value;
        });

        prevBtn.addEventListener("click", () => {
            currentTrackIndex = (currentTrackIndex - 1 + playlistItems.length) % playlistItems.length;
            loadTrack(currentTrackIndex);
        });

        nextBtn.addEventListener("click", () => {
            currentTrackIndex = (currentTrackIndex + 1) % playlistItems.length;
            loadTrack(currentTrackIndex);
        });

        playlistItems.forEach((item, index) => {
            item.addEventListener("click", () => loadTrack(index));
        });

        audioPlayer.addEventListener("ended", () => {
            nextBtn.click();
            if (isPlaying) audioPlayer.play();
        });

        loadTrack(0);
        playPauseBtn.addEventListener("click", togglePlay);
    });
</script>